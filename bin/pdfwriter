#!/usr/bin/env raku

use PDF::API6;
use PDF::Page;
use PDF::Content::Page :PageSizes;
use PDF::Content::Font::CoreFont;
constant CoreFont = PDF::Content::Font::CoreFont;

my $usage = 0;
if not @*ARGS.elems {
    say qq:to/HERE/;
    Usage: {$*PROGRAM.IO.basename} mode [options...] <input text file>

    Modes
      text - Converts the input file's lines to PDF (default)
      pod  - Converts the Raku pod file to PDF using :config
               options. See pod examples in the examples directory.

    Options
      size            - Font size (default: 10)
      font            - Font name (default: Courier)
      margins=l,r,t,b - Margins (default: one-inch on all sides)
      paper=T         - Where T is Letter (default), Legal, A4, or A5
      truncate=N      - Where N is the max number of chars on a line
                          and the rest are ignored
      wrap=N          - Where N is the max number of chars on a line
                          and the rest are wrapped to as many lines
                          as needed
      verbose         - Details of the execution
      debug           - For developer use

    Notes
      Modes and options may be selected by the minimum number of unique
        leading characters, e.g., 'te' selects 'text' and 'tr' selects
        'truncate'.
    HERE
    exit
}

my $ifil = @*ARGS.pop;
if not ($ifil.IO.f and $ifil.IO.r) {
    die "FATAL: Input file '$ifil' cannot be read.";
}

#enum Paper <Letter Legal A4 A5>;
enum Font <Courier>;
enum Weight <Bold>;

# true/false
my $truncate = 0;
my $wrap = 0;
my $text = 1;
my $pod = 0;
my $debug = 0;
my $verbose = 0;

# value inputs
my $font = Courier;
my $size = 10;
my $paper = Letter;
my ($left,$right,$top,$bottom);

$left=$right=$top=$bottom=72; # PS points

for @*ARGS {
    # options
    when $_.contains('v', :i) { $verbose = 1 }
    when $_.contains('d', :i) { $debug = 1 }
    when /:i tr <[uncate]>* '=' (\d+) / {
        $truncate = +$0;
    }
    when /:i w <[rap]>* '=' (\d+) / {
        $wrap = +$0;
    }
    when /:i pa <[per]>* '=' (\S+) / {
        $paper = ~$0;
    }
    when /:i s <[ize]>* '=' (\S+) / {
        $size = +$0;
    }
    when /:i m <[argins]>* '=' (\S+) ',' (\S+) ',' (\S+) ',' (\S+) / {
        $left   = +$0;
        $right  = +$1;
        $top    = +$2;
        $bottom = +$3;
    }

    # modes
    when $_.contains('t', :i) { $text = 1 }
    when $_.contains('p', :i) { $pod = 1 }
    default { die "FATAL: Unknown arg '$_'" }
}

if $pod {
   die "FATAL: The pod mode is not yet implemented.";
}

# some default setting to get started
my $line-spacing = $size * 1.25;
my $height = 11 * 72;

my $pdf = PDF::API6.new;
my $ofil = $ifil;
$ofil ~~ s/'.' <-[.]>+ $/.pdf/;
if $debug {
   say "DEBUG: infile '$ifil'; outfile '$ofil'";
   exit;
}

# Set the default page size for all pages
$pdf.media-box = $paper;

# Use a standard PDF core font
#my CoreFont $font = $pdf.core-font('Helvetica-Bold');
my $Font = $pdf.core-font: $font.Str; #, :weight<Bold>;

my @lines = $ifil.IO.lines;

# for now we just need a conversion to pdf
# determine how many pages:
my $lines-per-page = (($height - ($top - $bottom)) / $line-spacing).floor;
my $npages = (@lines.elems / $lines-per-page).ceiling;

# add an optimization
my @pages;
my $str = '';

my $pn = 0;
for @lines -> $line {
    ++$pn;
    if $pn > $npages {
        # put the string of page text away
        @pages.push: $str;
        # reinitialize it
        $str = '';
    }
    $str ~= $line;
}
if $str {
    @pages.push: $str;
}
if @pages.elems != $npages {
    die "FATAL: \$npages ($npages) != \@pages.elems ({@pages.elems})";
}

# Add a blank page to start
my $page = $pdf.add-page();
my $x  = $left;
my $y0 = $height - $top - $line-spacing;
my $y  = $y0;
my $pnum = 1;
for @lines -> $line {
    # add the line's text to the page
    $page.text: {
        .font = $Font, $size;
        .text-position = $x, $y;
        .say($line);
    }

    $y -= $line-spacing;
    if $y <= $bottom {
        # add a page number
        my $pp = "Page $pnum of $npages";
        my $yy = 36; # 1/2 inches from the bottom
        $page.text: {
            .font = $Font, $size;
            .text-position = $x, $yy;
            .say($pp);
        }
        # start a new page
        $page = $pdf.add-page();
        ++$pnum;
        # reset y
        $y  = $y0;
    }
}
# make sure the last page is numbered
if $pnum < $npages {
    # add a page number
    ++$pnum;
    my $pp = "Page $pnum of $npages";
    my $yy = 36; # 1/2 inches from the bottom
    $page.text: {
        .font = $Font, $size;
        .text-position = $x, $yy;
        .say($pp);
    }
}

# Save the new PDF
$pdf.save-as($ofil);
say "See file '$ofil'";

##### subroutines #####
sub make-text-doc1($pdf, @lines, $npages) {
    # line-by-line
}

sub make-text-doc2() {
    # page-by-page
}
